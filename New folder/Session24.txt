procedure -> exec p1 -> Explcitly Calling
function  -> select f1 () -> Explicitly Calling
trigger -> automatic procedure -> implicitly calling

Database Trigger:
-----------------
Database trigger is a stored procedure that is fired when an insert,update or delete statement is issued against the associated table.
uses:
1.To generate data automatically.
2.To enforce complex integrity constraints(checking with sysdate,checking with data in another table)
3.To customize complex security authorization
4.To maintain replicate tables.
5.To audit data modification.

syntax:
create or replace trigger <trigger_name> 
before/after insert or update or delete
on <tablename>
for each row
declare
variable declaration;
begin
executable statement;
end;
/

BANK_MASTER
ACCNO	BALANCE
1001	10000
1002	20000
1003	27500
1004	40000
1005	35555


BANK_TRANSACTION

CNAME	ACCNO	TTYPE	AMOUNT
Naveen	1003	db	2500
Raj	1005	cr	5555
raj	1005	db	20000

	
drop table bank_master;
drop table bank_transaction;

/
create table bank_master(accno NUMBER(4),BALANCE NUMBER(5));
INSERT INTO BANK_MASTER VALUES(1001,10000);
INSERT INTO BANK_MASTER VALUES(1002,20000);
INSERT INTO BANK_MASTER VALUES(1003,30000);
INSERT INTO BANK_MASTER VALUES(1004,40000);
INSERT INTO BANK_MASTER VALUES(1005,50000);

/


CREATE TABLE BANK_TRANSACTION(CNAME VARCHAR(20),ACCNO NUMBER(4),TTYPE CHAR(2),AMOUNT NUMBER(5));


t1.sql
create or replace trigger t1 after insert on bank_transaction 
declare
b1 bank_transaction%rowtype;
cursor c1 is select * from bank_transaction;
begin
open c1;
loop
fetch c1 into b1;
exit when c1%notfound;
end loop;
if b1.ttype='CR' then
update bank_master set balance=balance+b1.amount where accno=b1.accno;
elsif b1.ttype='DB' then
update bank_master set balance=balance-b1.amount where accno=b1.accno;
end if;
close c1;
end;
/

/
/
practical steps:
---------------
1.create bank_master table with sample data

2.create bank_transaction table 

3.create trigger program

4.insert into bank_transaction table.

5.verify the changes in bank_master table.







Trigger locks the table for DML operations to provide security

trigger checks for a) valid timing
		   b) week ends
		    c) public holidays

2.Create a trigger tr2 For INSERT,DELETE Triggering 
event where trigger should be fired if the transaction 
is performed before 10AM and After 4PM?


create or replace trigger t11 before insert or delete on 
bank_master
declare
a number;
begin
if to_char(sysdate,'hh24') not in(10,11,12,13,14,15)
then
raise_application_error(-20111,'No operations allowed invalid timings');
end if;
end;
/


3. create a trigger tr3 for INSERT,DELETE triggering  
event where trigger should be fired if the transactions are performed on SUNDAY?

create or replace trigger t12 before insert or delete on 
bank_master
declare
begin
if to_char(sysdate,'DY') in ('SUN') then
raise_application_error(-20112,'No operations allowed week ends');
end if;
end;
/

4. create a trigger tr1 for INSERT,DELETE triggering event where trigger should be fired if the transactions are performed on Saturday before 10am and after 2pm ?


5.Create a trigger t12 For INSERT Triggering 
event where trigger should be fired if the input amount is more than balance.

create or replace trigger t1 after insert on bank_transaction 
declare
b1 bank_transaction%rowtype;
bal number(5);
cursor c1 is select * from bank_transaction;
begin
open c1;
loop
fetch c1 into b1;
exit when c1%notfound;
end loop;
select balance into bal from bank_master where accno=b1.accno;
if (b1.TTYPE='CR') then
update bank_master set balance=balance+b1.amount where accno=b1.accno;
elsif ((b1.TTYPE='DB') AND (b1.amount >bal)) then
raise_application_error(-20113,'No operations allowed Invalid amount');
else
update bank_master set balance=balance-b1.amount where accno=b1.accno;
end if;
close c1;
end;
/

Write a database trigger to halt the transaction for the employee SALESMAN and
PRESIDENT

CREATE OR REPLACE TRIGGER SALES_PRI
BEFORE INSERT OR UPDATE OR DELETE ON EMP
FOR EACH ROW
WHEN (OLD.JOB IN ('SALESMAN','PRESIDENT') OR
NEW.JOB IN ('SALESMAN','PRESIDENT'))
BEGIN
RAISE_APPLICATION_ERROR(-20008,'TRANSACTION NOT ALLOWED FOR SALESMAN AND PRESIDENT....');
END;
/


CREATE OR REPLACE TRIGGER STOP_TRANSACTION BEFORE INSERT OR UPDATE OR DELETE ON EMP
BEGIN
  IF USER!='SCOTT' THEN
    RAISE_APPLICATION_ERROR(-20001,'SORRY TABLE IS UNDER MAINTAINENCE...PLEASE CONTACT SCOTT');
  END IF
END;

Write a database trigger store the username ,type of transaction ,date of transaction and time of transaction of table emp into the table EMP_LOG

CREATE OR REPLACE TRIGGER TRANS_TYPE
AFTER INSERT OR UPDATE OR DELETE ON EMP
DECLARE
V VARCHAR2(50);
BEGIN
IF INSERTING THEN
V:='I';
ELSIF UPDATING THEN
V:='U';
ELSE
V:='D';
END IF;
INSERT INTO EMP_LOG VALUES (USER,V,SYSDATE);
END;
/

* Trigger converts student name to uppercase automatically

create or replace trigger up_convert before insert on student
for each row
begin
:new.sname:=upper(:new.sname);
end;
/

:new => newly inserted value.
:old => old values.

/* 7.Write a database trigger display the message when the inserting hiredate is greater than system date
*/
CREATE OR REPLACE TRIGGER HIREDATE_OVER
AFTER INSERT ON EMP
FOR EACH ROW
BEGIN
IF :NEW.HIREDATE > SYSDATE THEN
RAISE_APPLICATION_ERROR(-20009,'INVALID HIREDATE.....');
END IF;
END;
/

Disabling Trigger:

syntax:


alter table <table_name> disable all triggers;

> alter table transaction disable all triggers;

enabling trigger:

alter table <table_name> enable all triggers

> alter table transaction enable all triggers;

--HOW TO ENABLE OR DISABLE PARTICULAR TRIGGER?

ALTER TRIGGER T11 DISABLE /ENABLE;

Removing trigger:

 drop trigger <trigger_name>;

ex:
drop tigger t1;



checking for existing triggers:

desc user_triggers

select trigger_name,table_name,status from user_triggers;
