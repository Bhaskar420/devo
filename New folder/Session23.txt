--To create a function to convert decimal into binary

create or replace FUNCTION DectoBin(a int)
RETURN varchar2
is
b varchar2(20):=' ';
n int;
BEGIN
n:=a;
WHILE (n > 0) 
loop
	
	 b:= b || CAST(trunc(mod(n,2)) AS varchar);
	 n:=trunc(n/2);
END loop;

select reverse(b) into b from dual;
return b;
END;
/
--How to convert decimal into octal?

create or replace FUNCTION Dectooct(a int)
RETURN varchar2
is
b varchar2(20):=' ';
n int;
BEGIN
n:=a;
WHILE (n > 0) 
loop
	
	 b:= b || CAST(trunc(mod(n,8)) AS varchar);
	 n:=trunc(n/8);
END loop;

	select reverse(b) into b from dual;
return b;
END;
/
--How to get age in years,months and days using Oracle?

select sysdate,
  hiredate,
  trunc(months_between(sysdate,hiredate) / 12) as years,
  trunc(months_between(sysdate,hiredate) -
    (trunc(months_between(sysdate,hiredate) / 12) * 12)) as months,
  trunc(sysdate)
    - add_months(hiredate, trunc(months_between(sysdate,hiredate))) as days
from emp;


package:

1.Package is a collection of procedures,functions,cursors,exceptions,variables and constants.

2.it is stored in "user_source" system table.

3.it can be shared with other users.

grant execute on <package_name> to <username>;

4.The will improve performance of oracle while accessing sub programs from client environment.

5.They support oops featues:
a.object
b.class
c.inheritance
d.polymorphism
e.data abstraction
f.data encapsulation
g.dynamic binding
h.message passing.




Advantages of PL/SQL Packages


1.modularity

2.Easier application design

3.Information hiding

4.Added functionality

5.Better performance.



package creation

1.package declaration

2.package body defination

3.package calling


1.syntax:

create or replace package <package_name> is
<local declaration>
begin
<executable statements>;
end <package_name>;

2.package body defination

create or replace package body <package_name> is
<localdeclaration>
begin
<statement1>;
<statement2>;
end <package_body_name>;



3.package calling 

select <package_name>.function_name();
exec <package_name>.procedure_name();


pack1.sql
create or replace package gowtham_pack is
procedure add(a number,b number);
procedure sub(a number,b number);
function mul(a number,b number) return number;
function div(a number,b number) return number;
end gowtham_pack;
/


PACK2.SQL

CREATE OR REPLACE PACKAGE BODY gowtham_pack IS
PROCEDURE ADD(A NUMBER,B NUMBER) IS
C NUMBER;
BEGIN
C:=A+B;
DBMS_OUTPUT.PUT_LINE('ADD TWO VALUES='||C);
END ADD;
PROCEUDRE SUB(A NUMBER,B NUMBER) IS
C NUMBER;
BEGIN
C:=A-B;
DBMS_OUTPUT.PUT_LINE('SUB TWO VALUES='||C);
END SUB;
FUNCTION MUL(A NUMBER,B NUMBER) RETURN NUMBER IS
C NUMBER;
BEGIN
C:=A*B;
RETURN C;
END MUL;
FUNCTION DIV(A NUMBER,B NUMBER) RETURN NUMBER IS
C NUMBER;
BEGIN
C:=A/B;
RETURN C;
END DIV;
END gowtham_pack;
/

PACK3.SQL

DECLARE
A NUMBER;
B NUMBER;
C NUMBER;
D NUMBER;
BEGIN
A:=&A;
B:=&B;
gowtham_pack.ADD(A,B);
gowtham_pack.SUB(A,B);
C:=gowtham_pack.MUL(A,B);
D:=gowtham_pack.DIV(A,B);
DBMS_OUTPUT.PUT_LINE('MUL VALUES='||C);
DBMS_OUTPUT.PUT_LINE('DIV VALUES='||D);
END;
/




PACK4.SQL

CREATE OR REPLACE PACKAGE SQL_OUTPUT IS
PROCEDURE PRINT_LINE(N VARCHAR2);
END SQL_OUTPUT;
/

PACK5.SQL

CREATE OR REPLACE PACKAGE BODY SQL_OUTPUT IS
PROCEDURE PRINT_LINE(N VARCHAR2) IS
BEGIN
DBMS_OUTPUT.PUT_LINE(N);
END PRINT_LINE;
END SQL_OUTPUT;
/


P1.SQL

declare 
a number;
b number;
c number;
begin
a:=&a;
b:=&b;
c:=a+b;
SQL_OUTPUT.PRINT_LINE('add two values='||c);
end;
/

P2.SQL


declare
a number;
b number;
c number;
d number;
e number;
f number;
begin
a:=&a;
b:=&b;
c:=a+b;
d:=a-b;
e:=a*b;
f:=a/b;
SAI_OUTPUT.PRINT_LINE('add two values='||c);
SAI_OUTPUT.PRINT_LINE('sub two values='||d);
SAI_OUTPUT.PRINT_LINE('mul two values='||e);
SAI_OUTPUT.PRINT_LINE('quotient values='||f);
end;
/
--example3

CREATE or REPLACE PACKAGE pkg1
	IS 
PROCEDURE pro1(no in number, name out varchar2);
FUNCTION fun1(no in number) RETURN varchar2;
	END;
/

--package body 

CREATE or REPLACE PACKAGE BODY pkg1
IS
PROCEDURE pro1(no in number, name  out varchar2)
		IS
		BEGIN
SELECT ENAME INTO name FROM emp WHERE empno =no;
		END;
	
FUNCTION fun1(no in number) return varchar2
		IS
		name varchar2(20);
		BEGIN
SELECT JOB INTO name FROM emp WHERE empno = no;
			RETURN name;
		END;
END pkg1;
/



--How to invoke package?
DECLARE
	no number := &no;
	name varchar2(20);
        info varchar2(20);
BEGIN
	pkg1.pro1(no,info);
	SQL_output.print_line('Procedure Result');
	SQL_output.print_line(info);
	SQL_output.print_line('Function Result');	                     
	name := pkg1.fun1(no);
	SQL_output.print_line(name);
END;
/	

--example 4

CREATE OR REPLACE PACKAGE personnel AS
  -- get employee's fullname
  FUNCTION get_fullname(n_emp_id NUMBER)
    RETURN VARCHAR2;
  -- get employee's salary
  FUNCTION get_salary(n_emp_id NUMBER)
    RETURN NUMBER;
END personnel;
/


--package body

CREATE OR REPLACE PACKAGE BODY personnel AS
  -- get employee's fullname
  FUNCTION get_fullname(n_emp_id NUMBER) RETURN VARCHAR2 IS
      v_fullname VARCHAR2(40);
  BEGIN
    SELECT ename || ',' ||  job||','||MGR
    INTO v_fullname
    FROM emp
    WHERE empno = n_emp_id;
 
    RETURN v_fullname;
 
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
    END; -- end get_fullname
 
  -- get salary
  FUNCTION get_salary(n_emp_id NUMBER) RETURN NUMBER IS
    n_salary NUMBER(8,2);
  BEGIN
    SELECT sal
    INTO n_salary
    FROM emp    WHERE empno = n_emp_id;
 
    RETURN n_salary;
 
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN NULL;
      
  END;
END personnel;

/


--how to invoke package

DECLARE
  n_salary NUMBER(8,2);
  v_name   VARCHAR2(50);
  n_emp_id NUMBER := &emp_id;
BEGIN
 
  v_name   := personnel.get_fullname(n_emp_id);
  n_salary := personnel.get_salary(n_emp_id);
 
  IF v_name  IS NOT NULL AND
    n_salary IS NOT NULL
  THEN
    dbms_output.put_line('Employee: ' || v_name);
    dbms_output.put_line('Salary:' || n_salary);
  END IF;
END;
/


package with "Function -overloading features"


OVERLOADING REFERS TO THE USE OF THE SAME THINGS FOR DIFFERENT PURPOSE.

ORACLE PACKAGE SUPPORTS THE OOPS CONCEPT.

THIS IS KNOWN AS FUNCTION POLYMORPHISM IN OOPS.)

add(int,int)
add(float,float)
add(char,char)
add(long,int)
add(char,int)
add(int,int) //invalid


Note: We are created group of add() with one function name
but with argument list different.

* The correct function to be invoked is determined by checking the number and type of arguments.



create or replace package load_pack as
function add_data(a number,b number) return number;
function add_data(a varchar2,b varchar2) return varchar2;
end load_pack;
/

create or replace package body load_pack as
function add_data (a number,b number) return number is
begin
return(a+b);
end add_data;
function add_data(a varchar2,b varchar2) return varchar2 is
begin
return(a||' '||b);
end add_data;
end load_pack;
/
system table : user_source

>desc load_pack;
>select load_pack.add_data(5453,5675) total,load_pack.add_data('guna','SAI') name from dual

Removing package :
> drop package package_name;

sharing package
> grant execute on load_pack to user1;

To view the existing package body

> select text from user_source where 
name='pack1';







